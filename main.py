# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'designer_final.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


from PyQt5.QtGui import QImage

import cv2
import numpy as np
import imutils

target_img = cv2.imread('target.PNG')
threshold = 0.1
try:
    faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
except Exception as e:
    print('Warning...',e)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 600))
        MainWindow.setMaximumSize(QtCore.QSize(1200, 600))
        MainWindow.setStyleSheet("background:rgb(83, 172, 89)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.video_frame = QtWidgets.QLabel(self.centralwidget)
        self.video_frame.setGeometry(QtCore.QRect(20, 30, 841, 431))
        self.video_frame.setText("")
        self.video_frame.setPixmap(QtGui.QPixmap(":/final/bg.png"))
        self.video_frame.setObjectName("video_frame")
        self.start = QtWidgets.QPushButton(self.centralwidget)
        self.start.setGeometry(QtCore.QRect(200, 500, 191, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.start.setFont(font)
        self.start.setStyleSheet("background:rgb(172, 83, 166)")
        self.start.setObjectName("start")
        self.stop = QtWidgets.QPushButton(self.centralwidget)
        self.stop.setGeometry(QtCore.QRect(470, 500, 191, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stop.setFont(font)
        self.stop.setStyleSheet("background:rgb(172, 83, 166)")
        self.stop.setObjectName("stop")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(880, 30, 311, 431))
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(3)
        self.frame.setObjectName("frame")
        self.offset_tag = QtWidgets.QLabel(self.frame)
        self.offset_tag.setGeometry(QtCore.QRect(20, 30, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.offset_tag.setFont(font)
        self.offset_tag.setObjectName("offset_tag")
        self.offset_value = QtWidgets.QLabel(self.frame)
        self.offset_value.setGeometry(QtCore.QRect(20, 120, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.offset_value.setFont(font)
        self.offset_value.setFrameShape(QtWidgets.QFrame.Box)
        self.offset_value.setText("")
        self.offset_value.setObjectName("offset_value")
        self.direction_tag = QtWidgets.QLabel(self.frame)
        self.direction_tag.setGeometry(QtCore.QRect(20, 250, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.direction_tag.setFont(font)
        self.direction_tag.setObjectName("direction_tag")
        self.direction_value = QtWidgets.QLabel(self.frame)
        self.direction_value.setGeometry(QtCore.QRect(20, 350, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.direction_value.setFont(font)
        self.direction_value.setFrameShape(QtWidgets.QFrame.Box)
        self.direction_value.setText("")
        self.direction_value.setObjectName("direction_value")
        MainWindow.setCentralWidget(self.centralwidget)
        ### Added code here

        self.started = False
        self.start.clicked.connect(self.loadImage)
        self.stop.clicked.connect(self.stop_btn)

        ####
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.start.setText(_translate("MainWindow", "START"))
        self.stop.setText(_translate("MainWindow", "STOP"))
        self.offset_tag.setText(_translate("MainWindow", "Offset Value"))
        self.direction_tag.setText(_translate("MainWindow", "Direction"))

    def setPhoto(self,image):
        """ This function will take image input and resize it 
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image,width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
        self.video_frame.setPixmap(QtGui.QPixmap.fromImage(image))

    def update(self):
        """ This function will update the photo according to the 
            current values of blur and brightness and set it to photo label.
        """
        self.setPhoto(self.image)

    def loadImage(self):
        """ This function will load the camera device, obtain the image
            and set it to label using the setPhoto function
        """
        if self.started:
            self.started=False
            self.start.setText('Start')	
        else:
            self.started=True
            self.stop.setText('Stop')
        
        cam = True # True for webcam
        if cam:
            self.vid = cv2.VideoCapture(0)
        else:
            vid = cv2.VideoCapture('video.mp4')
        
        cnt=0
        frames_to_count=20
        st = 0
        fps=0
        
        while(self.vid.isOpened()):
            QtWidgets.QApplication.processEvents()	
            img, self.image = self.vid.read()
            self.image  = imutils.resize(self.image ,height = 480 )
            
            gray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY) 
            try:
                faces = faceCascade.detectMultiScale(
                gray,
                scaleFactor=1.15,  
                minNeighbors=7, 
                minSize=(80, 80), 
                flags=cv2.CASCADE_SCALE_IMAGE)
                
                for (x, y, w, h) in faces:
                    cv2.rectangle(self.image, (x, y), (x + w, y + h), (10, 228,220), 2)
                    cv2.line(self.image, (int((2*x+w)/2),y),(int((2*x+w)/2),y+h),(0,255,0),2)

                result = cv2.matchTemplate(self.image, target_img, cv2.TM_CCOEFF)
                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                if max_val >= threshold:
                   

                # Get the size of the needle image. With OpenCV images, you can get the dimensions 
                # via the shape property. It returns a tuple of the number of rows, columns, and 
                # channels (if the image is color):
                    needle_w = target_img.shape[1]
                    needle_h = target_img.shape[0]

                    # Calculate the bottom right corner of the rectangle to draw
                    top_left = max_loc
                    bottom_right = (top_left[0] + needle_w, top_left[1] + needle_h)

                    # Draw a rectangle on our screenshot to highlight where we found the needle.
                    # The line color can be set as an RGB tuple
                    cv2.rectangle(self.image, top_left, bottom_right, 
                                    color=(0, 255, 0), thickness=2, lineType=cv2.LINE_4)
                    cv2.line(self.image, (int((2*top_left[0]+needle_w)/2),top_left[1]),(int((2*top_left[0]+needle_w)/2),top_left[1]+needle_h),(0,255,0),2)


                    offset_val= (2*x+w)/2 - (2*top_left[0]+needle_w)/2

                    if (offset_val>-5):
                        offset_val+=5
                    if (offset_val<5):
                        offset_val-=5
                    if(offset_val>5):
                        self.direction_value.setText("Move Head Gear Right")
                    if(offset_val<-5):
                        self.direction_value.setText("Move Head Gear Left")
                    if(offset_val > -5 and offset_val <5):
                        self.direction_value.setText("Perfect Position")
                    offset_val_str=str(np.abs(offset_val))
                    self.offset_value.setText(offset_val_str)

            except Exception as e:
                pass
            
            self.update()
            key = cv2.waitKey(1) & 0xFF
            if self.started==False:
                break
                print('Loop break')
    def stop_btn(self):
        self.started=False
        self.video_frame.setPixmap(QtGui.QPixmap(":/final/bg.png"))
        self.offset_value.setText("")
        self.direction_value.setText("")

import final


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
